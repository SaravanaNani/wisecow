name: CI/CD for Wisecow

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/wisecow:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/wisecow:latest

  deploy-to-ec2-minikube:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: SSH into EC2 and deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "ðŸš€ Starting deployment on EC2 Minikube..."

            # Install Docker & Minikube if not installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io curl git
              sudo usermod -aG docker $USER
            fi
            if ! command -v minikube &> /dev/null; then
              curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
              sudo install minikube-linux-amd64 /usr/local/bin/minikube
            fi

            # Start Minikube if not running
            minikube status || minikube start --driver=docker

            # Clone repo if missing
            cd ~
            if [ ! -d "wisecow" ]; then
              git clone https://github.com/saravana2002/wisecow.git
            fi
            cd wisecow
            git pull

            # Configure Docker with Minikube
            eval $(minikube docker-env)

            # Load Docker image into Minikube
            docker pull ${{ secrets.DOCKER_USERNAME }}/wisecow:latest
            minikube image load ${{ secrets.DOCKER_USERNAME }}/wisecow:latest

            # Create TLS cert if missing
            if [ ! -f "tls.crt" ] || [ ! -f "tls.key" ]; then
              echo "ðŸ”‘ Generating self-signed TLS cert..."
              openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
                -keyout tls.key -out tls.crt \
                -subj "/CN=wisecow.local/O=wisecow"
            fi

            # Apply Kubernetes resources
            kubectl apply -f deployment.yaml
            kubectl apply -f service.yaml
            kubectl apply -f ingress.yaml

            # Ensure TLS secret exists
            kubectl get secret wisecow-tls || \
              kubectl create secret tls wisecow-tls --key=tls.key --cert=tls.crt

            # Rollout status
            kubectl rollout status deployment/wisecow-deployment
            echo "âœ… Deployment completed successfully!"
